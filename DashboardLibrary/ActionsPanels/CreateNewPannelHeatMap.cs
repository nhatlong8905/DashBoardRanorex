///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace DashboardLibrary.ActionsPanels
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateNewPannelHeatMap recording.
    /// </summary>
    [TestModule("710e4aaa-04b7-4446-ad20-a5c984fc1524", ModuleType.Recording, 1)]
    public partial class CreateNewPannelHeatMap : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::DashboardLibrary.DashboardLibraryRepository repository.
        /// </summary>
        public static global::DashboardLibrary.DashboardLibraryRepository repo = global::DashboardLibrary.DashboardLibraryRepository.Instance;

        static CreateNewPannelHeatMap instance = new CreateNewPannelHeatMap();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateNewPannelHeatMap()
        {
            varDisplayName = "";
            varCatelogy = "";
            varSeries = "";
            varSeriesValue = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateNewPannelHeatMap Instance
        {
            get { return instance; }
        }

#region Variables

        string _varCatelogy;

        /// <summary>
        /// Gets or sets the value of variable varCatelogy.
        /// </summary>
        [TestVariable("ddc2e049-0335-4d39-be83-73adb5046fc0")]
        public string varCatelogy
        {
            get { return _varCatelogy; }
            set { _varCatelogy = value; }
        }

        string _varSeries;

        /// <summary>
        /// Gets or sets the value of variable varSeries.
        /// </summary>
        [TestVariable("fb234485-a539-4024-8224-ee27553f7f70")]
        public string varSeries
        {
            get { return _varSeries; }
            set { _varSeries = value; }
        }

        string _varSeriesValue;

        /// <summary>
        /// Gets or sets the value of variable varSeriesValue.
        /// </summary>
        [TestVariable("8cda8239-f118-425f-90c2-690e70863463")]
        public string varSeriesValue
        {
            get { return _varSeriesValue; }
            set { _varSeriesValue = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable varColor.
        /// </summary>
        [TestVariable("9ba4778d-f504-4314-87cb-4cb9d050a92b")]
        public string varColor
        {
            get { return repo.varColor; }
            set { repo.varColor = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable varDisplayName.
        /// </summary>
        [TestVariable("559f5c79-7316-4e25-b737-71a9d6c16d02")]
        public string varDisplayName
        {
            get { return repo.varDisplayName; }
            set { repo.varDisplayName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TestArchitect.Administers.AddNew' at Center.", repo.TestArchitect.Administers.AddNewInfo, new RecordItemIndex(0));
            repo.TestArchitect.Administers.AddNew.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TestArchitect.ActionsPanels.HeatMap.RadHeatMapType' at Center.", repo.TestArchitect.ActionsPanels.HeatMap.RadHeatMapTypeInfo, new RecordItemIndex(1));
            repo.TestArchitect.ActionsPanels.HeatMap.RadHeatMapType.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$varDisplayName' on item 'TestArchitect.ActionsPanels.TxtDisplayName'.", repo.TestArchitect.ActionsPanels.TxtDisplayNameInfo, new RecordItemIndex(2));
            repo.TestArchitect.ActionsPanels.TxtDisplayName.Element.SetAttributeValue("Value", varDisplayName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$varCatelogy' on item 'TestArchitect.ActionsPanels.HeatMap.CbbCategoryField'.", repo.TestArchitect.ActionsPanels.HeatMap.CbbCategoryFieldInfo, new RecordItemIndex(3));
            repo.TestArchitect.ActionsPanels.HeatMap.CbbCategoryField.Element.SetAttributeValue("TagValue", varCatelogy);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$varSeries' on item 'TestArchitect.ActionsPanels.HeatMap.CbbSeriesField'.", repo.TestArchitect.ActionsPanels.HeatMap.CbbSeriesFieldInfo, new RecordItemIndex(4));
            repo.TestArchitect.ActionsPanels.HeatMap.CbbSeriesField.Element.SetAttributeValue("TagValue", varSeries);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$varSeriesValue' on item 'TestArchitect.ActionsPanels.HeatMap.CbbSeriesValue'.", repo.TestArchitect.ActionsPanels.HeatMap.CbbSeriesValueInfo, new RecordItemIndex(5));
            repo.TestArchitect.ActionsPanels.HeatMap.CbbSeriesValue.Element.SetAttributeValue("TagValue", varSeriesValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Checked to 'True' on item 'TestArchitect.ActionsPanels.HeatMap.RadHeatValueDefault'.", repo.TestArchitect.ActionsPanels.HeatMap.RadHeatValueDefaultInfo, new RecordItemIndex(6));
            repo.TestArchitect.ActionsPanels.HeatMap.RadHeatValueDefault.Element.SetAttributeValue("Checked", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TestArchitect.ActionsPanels.HeatMap.txtColor' at Center.", repo.TestArchitect.ActionsPanels.HeatMap.txtColorInfo, new RecordItemIndex(7));
            repo.TestArchitect.ActionsPanels.HeatMap.txtColor.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TestArchitect.ActionsPanels.Color' at Center.", repo.TestArchitect.ActionsPanels.ColorInfo, new RecordItemIndex(8));
            repo.TestArchitect.ActionsPanels.Color.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TestArchitect.PageOK' at Center.", repo.TestArchitect.PageOKInfo, new RecordItemIndex(9));
            repo.TestArchitect.PageOK.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'TestArchitect.ActionsPanels.Indicator.NewPanel'.", repo.TestArchitect.ActionsPanels.Indicator.NewPanelInfo, new RecordItemIndex(10));
            Validate.Exists(repo.TestArchitect.ActionsPanels.Indicator.NewPanelInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
